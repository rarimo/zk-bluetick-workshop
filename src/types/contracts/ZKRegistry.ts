/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VerifierHelper {
  export type ProofPointsStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
  };

  export type ProofPointsStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
  };
}

export declare namespace SparseMerkleTree {
  export type ProofStruct = {
    root: BytesLike;
    siblings: BytesLike[];
    existence: boolean;
    key: BytesLike;
    value: BytesLike;
    auxExistence: boolean;
    auxKey: BytesLike;
    auxValue: BytesLike;
  };

  export type ProofStructOutput = [
    root: string,
    siblings: string[],
    existence: boolean,
    key: string,
    value: string,
    auxExistence: boolean,
    auxKey: string,
    auxValue: string
  ] & {
    root: string;
    siblings: string[];
    existence: boolean;
    key: string;
    value: string;
    auxExistence: boolean;
    auxKey: string;
    auxValue: string;
  };
}

export interface ZKRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMMITMENT_VERIFIER"
      | "ROOT_VALIDITY"
      | "UPGRADE_INTERFACE_VERSION"
      | "__ZKRegistry_init"
      | "commitUserRegistration"
      | "completeUserRegistration"
      | "getMaxHeight"
      | "getProof"
      | "getRoot"
      | "getValue"
      | "implementation"
      | "isRootLatest"
      | "isRootValid"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "signatureCommitments"
      | "transferOwnership"
      | "updateZKPassValidator"
      | "upgradeToAndCall"
      | "userAddresses"
      | "userHandles"
      | "zkpassValidator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommitmentRegistered"
      | "Initialized"
      | "OwnershipTransferred"
      | "RootUpdated"
      | "Upgraded"
      | "UserRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMMITMENT_VERIFIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_VALIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ZKRegistry_init",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitUserRegistration",
    values: [BytesLike, AddressLike, VerifierHelper.ProofPointsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "completeUserRegistration",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxHeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getProof", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getRoot", values?: undefined): string;
  encodeFunctionData(functionFragment: "getValue", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRootLatest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRootValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signatureCommitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZKPassValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAddresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHandles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zkpassValidator",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMITMENT_VERIFIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_VALIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ZKRegistry_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitUserRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeUserRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRootLatest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRootValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZKPassValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHandles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zkpassValidator",
    data: BytesLike
  ): Result;
}

export namespace CommitmentRegisteredEvent {
  export type InputTuple = [signatureCommitment: BytesLike];
  export type OutputTuple = [signatureCommitment: string];
  export interface OutputObject {
    signatureCommitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RootUpdatedEvent {
  export type InputTuple = [root: BytesLike];
  export type OutputTuple = [root: string];
  export interface OutputObject {
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [user: AddressLike, handleHash: BytesLike];
  export type OutputTuple = [user: string, handleHash: string];
  export interface OutputObject {
    user: string;
    handleHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZKRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ZKRegistry;
  waitForDeployment(): Promise<this>;

  interface: ZKRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMMITMENT_VERIFIER: TypedContractMethod<[], [string], "view">;

  ROOT_VALIDITY: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  __ZKRegistry_init: TypedContractMethod<
    [zkpassValidator_: AddressLike, maxDepth_: BigNumberish],
    [void],
    "nonpayable"
  >;

  commitUserRegistration: TypedContractMethod<
    [
      signatureCommitment_: BytesLike,
      userAddress_: AddressLike,
      points_: VerifierHelper.ProofPointsStruct
    ],
    [void],
    "nonpayable"
  >;

  completeUserRegistration: TypedContractMethod<
    [
      taskIdHex_: BytesLike,
      schemaIdHex_: BytesLike,
      uHash_: BytesLike,
      publicFieldsHash_: BytesLike,
      signature_: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getMaxHeight: TypedContractMethod<[], [bigint], "view">;

  getProof: TypedContractMethod<
    [key_: BytesLike],
    [SparseMerkleTree.ProofStructOutput],
    "view"
  >;

  getRoot: TypedContractMethod<[], [string], "view">;

  getValue: TypedContractMethod<[key_: BytesLike], [string], "view">;

  implementation: TypedContractMethod<[], [string], "view">;

  isRootLatest: TypedContractMethod<[root_: BytesLike], [boolean], "view">;

  isRootValid: TypedContractMethod<[root_: BytesLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  signatureCommitments: TypedContractMethod<
    [arg0: BytesLike],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateZKPassValidator: TypedContractMethod<
    [zkpassValidator_: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userAddresses: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  userHandles: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  zkpassValidator: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMMITMENT_VERIFIER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOT_VALIDITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "__ZKRegistry_init"
  ): TypedContractMethod<
    [zkpassValidator_: AddressLike, maxDepth_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitUserRegistration"
  ): TypedContractMethod<
    [
      signatureCommitment_: BytesLike,
      userAddress_: AddressLike,
      points_: VerifierHelper.ProofPointsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeUserRegistration"
  ): TypedContractMethod<
    [
      taskIdHex_: BytesLike,
      schemaIdHex_: BytesLike,
      uHash_: BytesLike,
      publicFieldsHash_: BytesLike,
      signature_: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMaxHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProof"
  ): TypedContractMethod<
    [key_: BytesLike],
    [SparseMerkleTree.ProofStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getValue"
  ): TypedContractMethod<[key_: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isRootLatest"
  ): TypedContractMethod<[root_: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRootValid"
  ): TypedContractMethod<[root_: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signatureCommitments"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateZKPassValidator"
  ): TypedContractMethod<[zkpassValidator_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userAddresses"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "userHandles"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "zkpassValidator"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CommitmentRegistered"
  ): TypedContractEvent<
    CommitmentRegisteredEvent.InputTuple,
    CommitmentRegisteredEvent.OutputTuple,
    CommitmentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RootUpdated"
  ): TypedContractEvent<
    RootUpdatedEvent.InputTuple,
    RootUpdatedEvent.OutputTuple,
    RootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;

  filters: {
    "CommitmentRegistered(bytes32)": TypedContractEvent<
      CommitmentRegisteredEvent.InputTuple,
      CommitmentRegisteredEvent.OutputTuple,
      CommitmentRegisteredEvent.OutputObject
    >;
    CommitmentRegistered: TypedContractEvent<
      CommitmentRegisteredEvent.InputTuple,
      CommitmentRegisteredEvent.OutputTuple,
      CommitmentRegisteredEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RootUpdated(bytes32)": TypedContractEvent<
      RootUpdatedEvent.InputTuple,
      RootUpdatedEvent.OutputTuple,
      RootUpdatedEvent.OutputObject
    >;
    RootUpdated: TypedContractEvent<
      RootUpdatedEvent.InputTuple,
      RootUpdatedEvent.OutputTuple,
      RootUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "UserRegistered(address,bytes32)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
  };
}
